import { useState, useEffect } from 'react';
import Head from 'next/head';
import Header from 'components/Header';
import { MainContainer, SecondaryContainer } from 'components/Containers';
import TileMap from 'components/TileMap.js';
import path from 'path';
import DropdownMenu from 'components/DropdownMenu';

// Simulated Power Flags
export const Powers = {
  None: 0,
  Gun: 1 << 0,
  Nova: 1 << 1,
  Drill: 1 << 2,
  Kilver: 1 << 3,
  AddressDisruptor1: 1 << 4,
  HighJump: 1 << 5,
  Labcoat: 1 << 6,
  Drone: 1 << 7,
  AddressDisruptor2: 1 << 8,
  Grapple: 1 << 9,
  Trenchcoat: 1 << 10,
  AddressBombs: 1 << 11,
  DroneTeleport: 1 << 12,
  ExtendedDroneLaunch: 1 << 13,
  SudranKey: 1 << 14,
  RedCoat: 1 << 15,
  Password: 1 << 16,
  LongKilver: 1 << 17,
  FatBeam: 1 << 18,
  TeleReset: 1 << 19,

  // Helper functions
  hasPower(powers, power) {
    return (powers & power) === power;
  },

  addPower(powers, power) {
    return powers | power;
  },

  removePower(powers, power) {
    return powers & ~power;
  }
};

export default function Debugger() {
  const [data, setData] = useState([]);
  const [locationData, setLocationData] = useState([]);
  const [cPowers, setCPowers] = useState(Powers.None);
  const [selectedPower, setSelectedPower] = useState(Powers.None);
  const [openLocations, setLocationOpen] = useState([]);

  useEffect(() => {
    console.log("cPowers Updated: ", cPowers);
    if (cPowers !== Powers.None) getOpenLocations();
  }, [cPowers]);

  useEffect(() => {
    console.log("locationData Updated: ", locationData);
    getOpenLocations();
  }, [locationData]);

  useEffect(() => {
    console.log("openLocations Updated: ", openLocations);
  }, [openLocations]);

  const handlePresetFile = (file) => {
    const reader = new FileReader();
    reader.readAsText(file);
    reader.onload = () => {
      const parsedData = reader.result
        .split("\n")
        .filter((row) => row.trim() !== "") // ignore empty lines
        .map((row) => {
          return row.split(",").map((cell) => parseInt(cell));
        });
      setData(parsedData);
    };
  };

  const loadPresetWorld = async () => {
    const response = await fetch('/maps/World.csv');
    if (!response.ok) {
      // handle error
      return;
    }
    const fileContent = await response.text();
    const fileName = path.basename('/maps/World.csv');
    const file = new File([fileContent], fileName);
    handlePresetFile(file);
  };

  useEffect(() => {
    loadPresetWorld();
  }, []);

  useEffect(() => {
    async function fetchData() {
      const res = await fetch('/logic/locations_hard.json');
      const jsonData = await res.json();
      setLocationData(jsonData);
    }
    fetchData();
  }, []);

  const AddPower = (v) => {
    if (Powers.hasPower(cPowers, v)) return;
    var n = Powers.addPower(cPowers, v);
    setCPowers(n);
  };

  const RemovePower = (v) => {
    if (!Powers.hasPower(cPowers, v)) return;
    var n = Powers.removePower(cPowers, v);
    setCPowers(n);
  };

  const handlePowerClick = (powerValue) => {
    setSelectedPower(powerValue);
  };

  const getPowersList = (cPowers) => {
    const powersList = [];
    for (const [key, value] of Object.entries(Powers)) {
      if (key !== 'hasPower' && key !== 'addPower' && key !== 'removePower' && Powers.hasPower(cPowers, value)) {
        powersList.push({ key, value });
      }
    }
    return powersList;
  };

  const powersList = getPowersList(cPowers);

  function getOpenLocations() {
    const availableLocations = locationData.filter(location =>
      location.requiredPowers.some(locationPowers => locationPowers === 0 || (locationPowers & cPowers)),
    );
    setLocationOpen(availableLocations);
  }

  return (
    <>
      <Head>
        <title>Axiom Verge Logic Tester</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="absolute w-full h-full bg-gray-100 overflow-hidden">
        <MainContainer>
          <Header title="Axiom Verge Logic Tester" version="0.0.1">
            <div className="w-1/8 h-full flex gap-2 justify-center items-center">
              <a href="/items" className="bg-gray-900 hover:bg-gray-700 hover:text-sky-400 p-2 px-4">Items</a>
              <a href="/locations" className="bg-gray-900 hover:bg-gray-700 hover:text-sky-400 p-2 px-4">Locations</a>
              <a href="/map/tracker" className="bg-gray-900 hover:bg-gray-700 hover:text-sky-400 p-2 px-4">Tracker</a>
              <div className="bg-gray-700 text-sky-400 p-2 px-4 cursor-not-allowed">Debugger</div>
            </div>
          </Header>
          <SecondaryContainer>
            {/* Left Container */}
            <nav className="hidden xl:block bg-gray-900 text-white w-full h-full overflow-hidden flex flex-col p-2">
              <DropdownMenu selectedPower={selectedPower} setSelectedPower={setSelectedPower} />
              <div className="w-full flex p-2 gap-2 justify-center items-center">
                <button className="w-full bg-gray-800 py-2 hover:bg-gray-700" onClick={() => AddPower(selectedPower)}>Add Power</button>
                <button className="w-full bg-gray-800 py-2 hover:bg-gray-700" onClick={() => RemovePower(selectedPower)}>Remove Power</button>
              </div>
              <div className="w-full p-2">
                <p>Powers:</p>
                <ul>
                  {powersList.map(power => (
                    <li className="w-full flex bg-black p-2" key={power.key} onClick={() => handlePowerClick(power.value)}>
                      {power.key}
                    </li>
                  ))}
                </ul>
              </div>
            </nav>
            {/* Right Container */}
            <main className="bg-black w-full h-full overflow-y-auto">
              <TileMap data={data} openLocations={openLocations} />
            </main>
          </SecondaryContainer>
        </MainContainer>
      </div>
    </>
  )
}
