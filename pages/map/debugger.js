import { useState, useEffect } from 'react';
import Head from 'next/head';
import Header from 'components/Header';
import { MainContainer, SecondaryContainer } from 'components/Containers';
import TileMap from 'components/TileMap.js';
import path from 'path';
import DropdownMenu from 'components/DropdownMenu';
import HeaderButton from 'components/HeaderButton';
import Powers from 'components/Powers';

const isDev = process.env.NODE_ENV !== 'production';

export default function Debugger() {
  const [data, setData] = useState([]);
  const [locationData, setLocationData] = useState([]);
  const [cPowers, setCPowers] = useState(Powers.None);
  const [selectedPower, setSelectedPower] = useState(Powers.None);
  const [openLocations, setLocationOpen] = useState([]);

  const getOpenLocations = () => {
    const availableLocations = [];

    locationData.forEach(location => {
      const powersMatch = location.requiredPowers.some(rp => {
        return (rp & cPowers) === rp;
      });

      if (powersMatch) {
        availableLocations.push(location.id);
      }
    });

    setLocationOpen(availableLocations);
  };

  useEffect(() => {
    if (locationData.length > 0) getOpenLocations();
  }, [cPowers, locationData]);

  useEffect(() => {
    console.log("openLocations Updated: ", openLocations);
  }, [openLocations]);

  const handlePresetFile = (file) => {
    const reader = new FileReader();
    reader.readAsText(file);
    reader.onload = () => {
      const parsedData = reader.result
        .split("\n")
        .filter((row) => row.trim() !== "") // ignore empty lines
        .map((row) => {
          return row.split(",").map((cell) => parseInt(cell));
        });
      setData(parsedData);
    };
  };

  const loadPresetWorld = async () => {
    let u = isDev ? '/maps/World.csv' : '/AVLogicEditorJS/maps/World.csv';
    const response = await fetch(u);
    if (!response.ok) {
      // handle error
      return;
    }
    const fileContent = await response.text();
    const fileName = path.basename(u);
    const file = new File([fileContent], fileName);
    handlePresetFile(file);
  };

  useEffect(() => {
    loadPresetWorld();
  }, []);

  useEffect(() => {
    async function fetchData() {
      const res = await fetch('/AVLogicEditorJS/logic/locations_hard.json');
      const jsonData = await res.json();
      setLocationData(jsonData);
    }
    fetchData();
  }, []);

  const AddPower = (v) => {
    if (Powers.hasPower(cPowers, v)) return;
    var n = Powers.addPower(cPowers, v);
    setCPowers(n);
  };

  const RemovePower = (v) => {
    if (!Powers.hasPower(cPowers, v)) return;
    var n = Powers.removePower(cPowers, v);
    setCPowers(n);
  };

  const handlePowerClick = (powerValue) => {
    setSelectedPower(powerValue);
  };

  const getPowersList = (cPowers) => {
    const powersList = [];
    for (const [key, value] of Object.entries(Powers)) {
      if (key !== 'hasPower' && key !== 'addPower' && key !== 'removePower' && Powers.hasPower(cPowers, value)) {
        powersList.push({ key, value });
      }
    }
    return powersList;
  };

  const powersList = getPowersList(cPowers);

  return (
    <>
      <Head>
        <title>Logic Map Debugger | Axiom Verge</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="absolute w-full h-full bg-gray-100 overflow-hidden">
        <MainContainer>
          <Header title="Axiom Verge Logic Tester" version="0.0.1">
            <div className="w-1/8 h-full flex gap-2 justify-center items-center">
              <HeaderButton title="Items" url="/items" active={false} />
              <HeaderButton title="Locations" url="/locations" active={false} />
              <HeaderButton title="Tracker" url="/map/tracker" active={false} />
              <HeaderButton title="Spoilers" url="/map/spoilers" active={false} />
              <HeaderButton title="Debugger" url="/map/debugger" active={true} />
              <HeaderButton title="Item Tracker" url="/widgets/items" active={false} />
            </div>
          </Header>
          <SecondaryContainer>
            {/* Left Container */}
            <nav className="hidden xl:block bg-gray-900 text-white w-full h-full overflow-hidden flex flex-col p-2">
              <DropdownMenu selectedPower={selectedPower} setSelectedPower={setSelectedPower} />
              <div className="w-full flex p-2 gap-2 justify-center items-center">
                <button className="w-full bg-gray-800 py-2 hover:bg-gray-700" onClick={() => AddPower(selectedPower)}>Add Power</button>
                <button className="w-full bg-gray-800 py-2 hover:bg-gray-700" onClick={() => RemovePower(selectedPower)}>Remove Power</button>
              </div>
              <div className="w-full p-2">
                <p>Powers:</p>
                <ul>
                  {powersList.map(power => (
                    <li className="w-full flex bg-black p-2" key={power.key} onClick={() => handlePowerClick(power.value)}>
                      {power.key}
                    </li>
                  ))}
                </ul>
              </div>
            </nav>
            {/* Right Container */}
            <main className="bg-black w-full h-full overflow-y-auto">
              <TileMap data={data} openLocations={openLocations} />
            </main>
          </SecondaryContainer>
        </MainContainer>
      </div>
    </>
  )
}
