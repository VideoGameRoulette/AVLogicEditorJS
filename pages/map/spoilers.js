import { useState, useEffect, useCallback } from 'react';
import Head from 'next/head';
import path from 'path';
import SpoilerMap from 'components/SpoilerMap.js';
import ErrorPage from "components/Errors";

const isDev = process.env.NODE_ENV !== 'production';

const websocket_endpoint = 'ws://localhost:19906';

export default function Spoilers() {
  const [data, setData] = useState(null);
  const [items, setItems] = useState(null);
  const [randomItems, setRandomItems] = useState(null);
  const [connected, setConnected] = useState(false);

  const handlePresetFile = useCallback((file) => {
    const reader = new FileReader();
    reader.readAsText(file);
    reader.onload = () => {
      const parsedData = reader.result
        .split("\n")
        .filter((row) => row.trim() !== "") // ignore empty lines
        .map((row) => {
          return row.split(",").map((cell) => parseInt(cell));
        });
      setData(parsedData);
    };
  }, [setData]);

  const loadPresetWorld = useCallback(async () => {
    let u = isDev ? '/maps/World.csv' : '/AVLogicEditorJS/maps/World.csv';
    const response = await fetch(u);
    if (!response.ok) {
      // handle error
      return;
    }
    const fileContent = await response.text();
    const fileName = path.basename(u);
    const file = new File([fileContent], fileName);
    handlePresetFile(file);
  }, [handlePresetFile]);

  useEffect(() => {
    loadPresetWorld();
  }, [loadPresetWorld]);

  const handleConnect = useCallback(() => {
    const appendData = data => {
      if (data === null) return;
      const { Items, RandomItems } = data;
      setItems(Items);
      setRandomItems(RandomItems);
    };

    const socket = new WebSocket(websocket_endpoint);
    socket.onopen = () => {
      setConnected(true);
    };
    socket.onclose = () => {
      setConnected(false);
    };
    socket.onmessage = event => appendData(JSON.parse(event.data));
  }, [setConnected, setItems, setRandomItems]);

  useEffect(() => {
    handleConnect();
  }, [handleConnect]);

  if (items === null) return <ErrorPage connected={connected} callback={handleConnect} />;

  return (
    <>
      <Head>
        <title>Spoiler Map | Axiom Verge</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="absolute w-full h-full bg-gray-100 overflow-hidden">
        <main className="bg-black w-full h-full overflow-auto flex justify-start items-start">
          <SpoilerMap data={data} items={items} randomItems={randomItems} />
        </main>
      </div>
    </>
  );
}
